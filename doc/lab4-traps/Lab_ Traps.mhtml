From: <Saved by Blink>
Snapshot-Content-Location: https://pdos.csail.mit.edu/6.S081/2020/labs/traps.html
Subject: Lab: Traps
Date: Mon, 5 Feb 2024 23:25:13 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--7G4pNoGW1euGe5PsGOPcTkmbEFOKKFUSRwkQmxqo5e----"


------MultipartBoundary--7G4pNoGW1euGe5PsGOPcTkmbEFOKKFUSRwkQmxqo5e----
Content-Type: text/html
Content-ID: <frame-01196E2D00BAB31B5CBB72C0FB487111@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://pdos.csail.mit.edu/6.S081/2020/labs/traps.html

<html class=3D"cm-retina" collamark=3D"crx"><head><meta http-equiv=3D"Conte=
nt-Type" content=3D"text/html; charset=3Dwindows-1252"><link rel=3D"stylesh=
eet" type=3D"text/css" href=3D"cid:css-09ebc511-9237-4679-9b12-d15ce539c9df=
@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-=
11d9595b-f712-403b-bdfa-83221b874b35@mhtml.blink" /><link rel=3D"stylesheet=
" type=3D"text/css" href=3D"cid:css-56b53555-5f76-43bf-b464-101ef3163c8b@mh=
tml.blink" /><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-fd4=
8db66-d562-4a67-86e3-60c13906e64b@mhtml.blink" />
<title>Lab: Traps</title>
<link rel=3D"stylesheet" href=3D"https://pdos.csail.mit.edu/6.S081/2020/lab=
s/labs.css" type=3D"text/css">
=20

</head>
<body>

<h1>Lab: traps</h1>

<p>This lab explores how system calls are implemented using traps.
  You will first do a warm-up exercises with stacks and then you will
  implement an example of user-level trap handling.

</p><div class=3D"prereq">
<p>Before you start coding, read Chapter 4 of the <a href=3D"https://pdos.c=
sail.mit.edu/6.S081/2020/xv6/book-riscv-rev1.pdf">xv6 book</a>, and
    related source files:
 =20
  </p><ul>

    <li> <tt>kernel/trampoline.S</tt>: the assembly involved in
      changing from user space to kernel space and back
     =20
    </li><li> <tt>kernel/trap.c</tt>: code handling all interrupts
 =20
  </li></ul>
</div>

<p>To start the lab, switch to the trap branch:
  </p><pre>  $ <kbd>git fetch</kbd>
  $ <kbd>git checkout traps</kbd>
  $ <kbd>make clean</kbd>
  </pre>

<h2>RISC-V assembly (<a class=3D"easy" href=3D"https://pdos.csail.mit.edu/6=
.S081/2020/labs/guidance.html">easy</a>)</h2>

<p>It will be important to understand a bit of
  RISC-V assembly, which you were exposed to in 6.004. There is a file
  <tt>user/call.c</tt> in your xv6 repo.  <kbd>make fs.img</kbd> compiles i=
t
  and also produces a readable assembly version of the program in
  <tt>user/call.asm</tt>.

</p><p>Read the code in call.asm for the functions <tt>g</tt>, <tt>f</tt>, =
and <tt>main</tt>.
  The instruction
  manual for RISC-V is on the <a href=3D"https://pdos.csail.mit.edu/6.S081/=
2020/reference.html">reference page</a>.
  Here are some questions that you should answer (store the answers in
  a file answers-traps.txt):

  </p><div class=3D"question">
    Which registers contain arguments to functions?  For example, which
    register holds 13 in main's call to <tt>printf</tt>?
  </div>
 =20
  <div class=3D"question">
    Where is the call to function <tt>f</tt>
    in the assembly code for main? Where is the call to <tt>g</tt>?  (Hint:=
 the
    compiler may inline functions.)
  </div>
 =20
  <div class=3D"question">
    At what address is the
    function <tt>printf</tt> located?
  </div>

  <div class=3D"question">
    What value is in the register <tt>ra</tt>
    just after the <tt>jalr</tt> to <tt>printf</tt> in <tt>main</tt>?
  </div>

  <div class=3D"question">
    <p>Run the following code.
      </p><pre>	unsigned int i =3D 0x00646c72;
	printf("H%x Wo%s", 57616, &amp;i);
      </pre>
      What is the output?
      <a href=3D"http://web.cs.mun.ca/~michael/c/ascii-table.html">Here's a=
n ASCII
	table</a> that maps bytes to characters.

    <p>The output depends on that fact that the RISC-V is
      little-endian.  If the RISC-V were instead big-endian what would
      you set <code>i</code> to in order to yield the same output?
      Would you need to change
      <code>57616</code> to a different value?</p>

    <p>
      <a href=3D"http://www.webopedia.com/TERM/b/big_endian.html">Here's
	a description of little- and big-endian</a>
      and
      <a href=3D"http://www.networksorcery.com/enp/ien/ien137.txt">a more
	whimsical description</a>.
    </p>

  </div>

  <div class=3D"question">
    <p>In the following code, what is going to be printed after
      <code>'y=3D'</code>?  (note: the answer is not a specific value.)  Wh=
y
      does this happen?

      </p><pre>	printf("x=3D%d y=3D%d", 3);
      </pre>
  </div>


  <h2>Backtrace (<a class=3D"moderate" href=3D"https://pdos.csail.mit.edu/6=
.S081/2020/labs/guidance.html">moderate</a>)</h2>

 <p>For debugging it is often useful to have a backtrace: a list
    of the function calls on the stack above the point
    at which the error occurred.

</p><div class=3D"required">
<p>
  Implement a <tt>backtrace()</tt> function
  in <tt>kernel/printf.c</tt>.  Insert a call to this function
  in <tt>sys_sleep</tt>, and then run <kbd>bttest</kbd>, which
  calls <tt>sys_sleep</tt>.
  Your output should be as follows:
  </p><pre>backtrace:
0x0000000080002cda
0x0000000080002bb6
0x0000000080002898
  </pre>
  After <tt>bttest</tt> exit qemu. In your terminal: the addresses may be s=
lightly different but if you
  run <tt>addr2line -e kernel/kernel</tt> (or <tt>riscv64-unknown-elf-addr2=
line -e kernel/kernel</tt>) and cut-and-paste the above addresses as
  follows:
  <pre>    $ <kbd>addr2line -e kernel/kernel</kbd>
    0x0000000080002de2
    0x0000000080002f4a
    0x0000000080002bfc
    Ctrl-D
  </pre>
  You should see something like this:
  <pre>    kernel/sysproc.c:74
    kernel/syscall.c:224
    kernel/trap.c:85
  </pre>
</div>

<p>The compiler puts in each stack frame a frame pointer that holds
  the address of the caller's frame pointer.  Your <tt>backtrace</tt>
  should use these frame pointers to walk up the stack and print the
  saved return address in each stack frame.

</p><p>Some hints:
 </p><ul>
 <li>Add the prototype for backtrace to <tt>kernel/defs.h</tt> so that
  you can invoke <tt>backtrace</tt> in <tt>sys_sleep</tt>.
 </li><li>The GCC compiler stores the frame pointer of the currently
 executing function in the
 register <tt>s0</tt>. Add the following function
 to <tt>kernel/riscv.h</tt>:
 <pre>static inline uint64
r_fp()
{
  uint64 x;
  asm volatile("mv %0, s0" : "=3Dr" (x) );
  return x;
}
</pre>
 and call this function in <tt>backtrace</tt> to read the current frame poi=
nter.  This function uses <a href=3D"https://gcc.gnu.org/onlinedocs/gcc/Usi=
ng-Assembly-Language-with-C.html">in-line
 assembly</a> to read <tt>s0</tt>.
 </li><li>These
 <a href=3D"https://pdos.csail.mit.edu/6.828/2020/lec/l-riscv-slides.pdf">l=
ecture
 notes</a> have a picture of the layout of stack frames. Note that the
 return address lives at a fixed offset (-8) from the frame pointer of a
 stackframe, and that the saved frame pointer lives at fixed offset (-16) f=
rom the frame pointer.
 </li><li>Xv6 allocates one page for each stack in the xv6 kernel at
 PAGE-aligned address. You can compute
 the top and bottom address of the stack page by
 using <tt>PGROUNDDOWN(fp)</tt> and <tt>PGROUNDUP(fp)</tt>
 (see <tt>kernel/riscv.h</tt>. These number are helpful
 for <tt>backtrace</tt> to terminate its loop.
 </li></ul>

<p>Once your backtrace is working, call it from <tt>panic</tt>
  in <tt>kernel/printf.c</tt> so that you see the kernel's backtrace
  when it panics.

</p><h2>Alarm (<a class=3D"hard" href=3D"https://pdos.csail.mit.edu/6.S081/=
2020/labs/guidance.html">hard</a>)</h2>

<div class=3D"required">
<p>
In this exercise you'll add a feature to xv6 that periodically alerts
a process as it uses CPU time. This might be useful for compute-bound
processes that want to limit how much CPU time they chew up, or for
processes that want to compute but also want to take some periodic
action. More generally, you'll be implementing a primitive form of
user-level interrupt/fault handlers; you could use something similar
to handle page faults in the application, for example.  Your solution
is correct if it passes alarmtest and usertests.
</p></div>

<p>
You should add a new <tt>sigalarm(interval, handler)</tt> system call.
If an application calls <tt>sigalarm(n, fn)</tt>, then after every
<tt>n</tt> "ticks" of CPU time that the program consumes, the kernel
should cause application function
<tt>fn</tt> to be called. When <tt>fn</tt> returns, the application
should resume where it left off. A tick is a fairly arbitrary unit of
time in xv6, determined by how often a hardware timer generates
interrupts.
If an application calls <tt>sigalarm(0, 0)</tt>, the kernel should
stop generating periodic alarm calls.

</p><p>
You'll find a file <tt>user/alarmtest.c</tt> in your xv6
repository. Add it to the Makefile. It won't compile correctly
until you've added <tt>sigalarm</tt> and <tt>sigreturn</tt>
system calls (see below).

</p><p>
<tt>alarmtest</tt> calls <tt>sigalarm(2, periodic)</tt>
in <tt>test0</tt> to ask the kernel to force a call
to <tt>periodic()</tt> every 2 ticks, and then spins for a while.  You
can see the assembly code for alarmtest in user/alarmtest.asm, which
may be handy for debugging.  Your solution is correct when
<tt>alarmtest</tt> produces output like this and usertests also runs
correctly:

</p><pre>$ <kbd>alarmtest</kbd>
test0 start
........alarm!
test0 passed
test1 start
...alarm!
..alarm!
...alarm!
..alarm!
...alarm!
..alarm!
...alarm!
..alarm!
...alarm!
..alarm!
test1 passed
test2 start
................alarm!
test2 passed
$ <kbd>usertests</kbd>
...
ALL TESTS PASSED
$
</pre>

<p>When you're done, your solution will be only a few lines of code,
  but it may be tricky to get it right. We'll test your code with the
  version of alarmtest.c in the original repository. You can modify
  alarmtest.c to help you debug, but make sure the original alarmtest
  says that all the tests pass.

</p><h3>test0: invoke handler</h3>

<p>Get started by modifying the kernel to jump to the alarm handler in
user space, which will cause test0 to print "alarm!". Don't worry yet
what happens after the "alarm!" output; it's OK for now if your
program crashes after printing "alarm!". Here are some hints:

</p><ul>

<li>You'll need to modify the Makefile to cause <tt>alarmtest.c</tt>
to be compiled as an xv6 user program.

</li><li>The right declarations to put in <tt>user/user.h</tt> are:
<pre>    int sigalarm(int ticks, void (*handler)());
    int sigreturn(void);
</pre>

</li><li>Update user/usys.pl (which generates user/usys.S),
    kernel/syscall.h, and kernel/syscall.c=20
   to allow <tt>alarmtest</tt> to invoke the sigalarm and
   sigreturn system calls.

</li><li>For now, your <tt>sys_sigreturn</tt> should just return zero.

</li><li>Your <tt>sys_sigalarm()</tt> should store the alarm interval and
the pointer to the handler function in new fields in the <tt>proc</tt>
structure (in <tt>kernel/proc.h</tt>).

</li><li>You'll need to keep track of how many ticks have passed since the
last call (or are left until the next call) to a process's alarm
handler; you'll need a new field in <tt>struct&nbsp;proc</tt> for this
too.  You can initialize <tt>proc</tt> fields in <tt>allocproc()</tt>
in <tt>proc.c</tt>.

</li><li>Every tick, the hardware clock forces an interrupt, which is handl=
ed
in <tt>usertrap()</tt> in <tt>kernel/trap.c</tt>.


</li><li>You only want to manipulate a process's alarm ticks if there's a=
=20
  timer interrupt; you want something like
<pre>    if(which_dev =3D=3D 2) ...
</pre>

</li><li>Only invoke the alarm function if the process has a
  timer outstanding.  Note that the address of the user's alarm
  function might be 0 (e.g., in user/alarmtest.asm, <tt>periodic</tt> is at
  address 0).

 </li><li>You'll need to modify
  <tt>usertrap()</tt> so that when a
  process's alarm interval expires, the user process executes
  the handler function.
  When a trap on the RISC-V returns to user space, what determines
  the instruction address at which user-space code resumes execution?

</li><li>It will be easier to look at traps with gdb if you tell qemu to
use only one CPU, which you can do by running
<pre>    make CPUS=3D1 qemu-gdb
</pre>

</li><li>You've succeeded if alarmtest prints "alarm!".

</li></ul>

<h3>test1/test2(): resume interrupted code</h3>

<p>Chances are that alarmtest crashes in test0 or test1 after it prints
"alarm!", or that alarmtest (eventually) prints "test1 failed",
or that alarmtest exits without printing "test1 passed".
To fix this, you must
ensure that, when the alarm handler is done,
control returns to
the instruction at which the user program was originally
interrupted by the timer interrupt. You must ensure that
the register contents are restored to the values they held
at the time of the interrupt, so that the user program
can continue undisturbed after the alarm.
Finally,
you should "re-arm" the alarm counter after each time it goes
off, so that the handler is called periodically.

</p><p>As a starting point, we've made a design decision for you:
user alarm handlers are required to call the <tt>sigreturn</tt>
system call when they have finished. Have a look at
<tt>periodic</tt> in <tt>alarmtest.c</tt> for an example.
This means that you can add code to <tt>usertrap</tt> and
<tt>sys_sigreturn</tt> that cooperate to cause the user
process to resume properly after it has handled the alarm.


</p><p>
  Some hints:
  </p><ul>
    <li>Your solution will require you to save and restore
      registers---what registers do you need to save and restore to resume
      the interrupted code correctly? (Hint: it will be many).
    </li><li>Have <tt>usertrap</tt> save enough state in
      <tt>struct proc</tt> when the timer goes off
      that <tt>sigreturn</tt> can correctly return to the
      interrupted user code.

    </li><li>Prevent re-entrant calls to the handler----if a handler hasn't
      returned yet, the kernel shouldn't call it again. <tt>test2</tt>
      tests this.
  </li></ul>

<p>Once you pass <tt>test0</tt>, <tt>test1</tt>, and <tt>test2</tt>
  run <tt>usertests</tt> to make sure you didn't break any other parts
  of the kernel.


</p><p><a name=3D"submit">
</a></p><h2><a name=3D"submit">Submit the lab</a></h2><a name=3D"submit">

<p><b>This completes the lab.</b> Make sure you pass all of the make
grade tests. If this lab had questions, don't forget to write up your
answers to the questions in answers-<i>lab-name</i>.txt. Commit your change=
s
(including adding answers-<i>lab-name</i>.txt) and type make handin in the =
lab
  directory to hand in your lab.

</p><h3>Time spent</h3>

<p>Create a new file, <tt>time.txt</tt>, and put in it a single integer, th=
e
number of hours you spent on the lab. Don't forget to <tt>git add</tt> and
<tt>git commit</tt> the file.

</p><h3>Submit</h3>

You will turn in your assignments using
the </a><a href=3D"https://6828.scripts.mit.edu/2020/handin.py/">submission
website</a>.  You need to request once an API key from the submission
website before you can turn in any assignments or labs.
<p></p>

<p>After committing your final changes to the lab, type <kbd>make
handin</kbd> to submit your lab.
</p><pre>$ <kbd>git commit -am "ready to submit my lab"</kbd>
[util c2e3c8b] ready to submit my lab
 2 files changed, 18 insertions(+), 2 deletions(-)

$ <kbd>make handin</kbd>
tar: Removing leading `/' from member names
Get an API key for yourself by visiting https://6828.scripts.mit.edu/2020/h=
andin.py/
Please enter your API key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Cur=
rent
                                 Dload  Upload   Total   Spent    Left  Spe=
ed
100 79258  100   239  100 79019    853   275k --:--:-- --:--:-- --:--:--  2=
76k
$
</pre>
<kbd>make handin</kbd> will store your API key in <i>myapi.key</i>. If you =
need
to change your API key, just remove this file and let <kbd>make handin</kbd=
>
generate it again (<i>myapi.key</i> must not include newline characters).
<p></p>

<p>
If you run <kbd>make handin</kbd> and you have either uncomitted changes or
untracked files, you will see output similar to the following:
</p><pre> M hello.c
?? bar.c
?? foo.pyc
Untracked files will not be handed in.  Continue? [y/N]
</pre>
Inspect the above lines and make sure all files that your lab solution need=
s
are tracked i.e. not listed in a line that begins with <kbd>??</kbd>.
You can cause <tt>git</tt> to track a new file that you create using
<tt>git add filename</tt>.
<p></p>

<p>
If <kbd>make handin</kbd> does not work properly,=20
try fixing the problem with the curl or Git commands.
Or you can run <kbd>make tarball</kbd>.
This will make a tar file for you, which you can
then upload via our=20
<a href=3D"https://6828.scripts.mit.edu/2020/handin.py/">web interface</a>.
</p>

<p>
</p><div class=3D"warning">
<ul>
  <li>Please run `make grade` to ensure that your code passes all of the te=
sts</li>
  <li>Commit any modified source code before running `make handin`</li>
  <li>You can inspect the status of your submission and download the submit=
ted code at <a href=3D"https://6828.scripts.mit.edu/2020/handin.py/">https:=
//6828.scripts.mit.edu/2020/handin.py/</a> </li>
</ul>
</div>




<h2>Optional challenge exercises</h2>

<ul>

  <li>Print the names of the functions and line numbers
  in <tt>backtrace()</tt> instead of numerical
  addresses (<a class=3D"hard" href=3D"https://pdos.csail.mit.edu/6.S081/20=
20/labs/guidance.html">hard</a>).</li>

</ul>



<div class=3D"cm-popover" id=3D"cm-popover" style=3D"display: none;">      =
          <div class=3D"cm-popover__arrow">                    <span class=
=3D"cm-popover__arrow-bg"></span>                </div>                <div=
 class=3D"cm-popover__raw-open">null</div>            </div><div id=3D"webh=
ighlights-notifications"></div><webhighlights-extension></webhighlights-ext=
ension><webhighlights-sidebar><template shadowmode=3D"open"><!---->
      <!--?lit$482699099$-->
            <main-component part=3D"main-component" data-testid=3D"webhighl=
ights-sidebar-MAIN_COMPONENT" style=3D"left: 0px; right: unset;"><template =
shadowmode=3D"open"><!---->
      <webhighlights-popover data-testid=3D"main-component-POPOVER">
        <!--?lit$482699099$--><!--?-->
      <template shadowmode=3D"open"><!----><!--?--></template></webhighligh=
ts-popover>

      <!-- Button to toggle side-bar. It hides when animation is active -->
      <!--?lit$482699099$--><!--?-->
      <!--?lit$482699099$-->
    </template></main-component>
         =20
      <!--?lit$482699099$--><!--?-->
      <!--?lit$482699099$--><!--?-->
    </template></webhighlights-sidebar><webhighlights-notification><templat=
e shadowmode=3D"open"><!---->
      <div class=3D"notification-wrapper slide-right ">
        <!--?lit$482699099$--><!--?-->
      </div>
    </template></webhighlights-notification><webhighlights-marker><template=
 shadowmode=3D"open"><!---->
      <!--?lit$482699099$-->
            <webhighlights-popup-toolbox data-testid=3D"webhighlights-marke=
r-POPUP_TOOLBOX"><template shadowmode=3D"open"><!---->
      <!--?lit$482699099$-->
    </template></webhighlights-popup-toolbox>
         =20
    </template></webhighlights-marker><webhighlights-popup-toolbox><templat=
e shadowmode=3D"open"><!---->
      <!--?lit$482699099$-->
    </template></webhighlights-popup-toolbox><webhighlights-notification></=
webhighlights-notification></body></html>
------MultipartBoundary--7G4pNoGW1euGe5PsGOPcTkmbEFOKKFUSRwkQmxqo5e----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-09ebc511-9237-4679-9b12-d15ce539c9df@mhtml.blink

@charset "windows-1252";

.highlight-mengshou-wrap { background: rgb(255, 255, 153); cursor: pointer;=
 }

.highlight-mengshou-wrap.active { background: rgb(255, 255, 187); }
------MultipartBoundary--7G4pNoGW1euGe5PsGOPcTkmbEFOKKFUSRwkQmxqo5e----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-11d9595b-f712-403b-bdfa-83221b874b35@mhtml.blink

@charset "windows-1252";

:root { --wh-slate-50: #f8fafc; --wh-slate-100: #f1f5f9; --wh-slate-200: #e=
2e8f0; --wh-slate-300: #cbd5e1; --wh-slate-400: #94a3b8; --wh-slate-500: #6=
4748b; --wh-slate-600: #475569; --wh-slate-700: #334155; --wh-slate-800: #1=
e293b; --wh-slate-900: #0f172a; --wh-slate-950: #020617; --wh-primary-50: r=
gb(187, 219, 204); --wh-primary-100: rgb(153, 208, 184); --wh-primary-200: =
rgb(120, 197, 164); --wh-primary-300: rgb(86, 186, 144); --wh-primary-400: =
rgb(53, 176, 125); --wh-primary-500: hsl(161, 100%, 35%); --wh-primary-600:=
 hsl(161, 100%, 33%); --wh-primary-700: hsl(161, 100%, 31%); --wh-primary-8=
00: hsl(161, 100%, 29%); --wh-primary-900: hsl(161, 100%, 25%); --wh-primar=
y-950: hsl(161, 100%, 20%); --wh-secondary-50: hsl(218, 22%, 30%); --wh-sec=
ondary-100: hsl(218, 22%, 27%); --wh-secondary-200: hsl(218, 22%, 25%); --w=
h-secondary-300: hsl(218, 22%, 22%); --wh-secondary-400: hsl(218, 22%, 20%)=
; --wh-secondary-500: hsl(218, 22%, 18%); --wh-secondary-600: hsl(218, 22%,=
 16%); --wh-secondary-700: hsl(218, 22%, 14%); --wh-secondary-800: hsl(218,=
 22%, 12%); --wh-secondary-900: hsl(218, 22%, 8%); --wh-secondary-950: hsl(=
218, 22%, 6%); --wh-gray-50: #f9fafb; --wh-gray-100: #f3f4f6; --wh-gray-200=
: #e5e7eb; --wh-gray-300: #d1d5db; --wh-gray-400: #9ca3af; --wh-gray-500: #=
6b7280; --wh-gray-600: #4b5563; --wh-gray-700: #374151; --wh-gray-800: #1f2=
937; --wh-gray-900: #111827; --wh-gray-950: #030712; --wh-zinc-50: #fafafa;=
 --wh-zinc-100: #f4f4f5; --wh-zinc-200: #e4e4e7; --wh-zinc-300: #d4d4d8; --=
wh-zinc-400: #a1a1aa; --wh-zinc-500: #71717a; --wh-zinc-600: #52525b; --wh-=
zinc-700: #3f3f46; --wh-zinc-800: #27272a; --wh-zinc-900: #18181b; --wh-zin=
c-950: #09090b; --wh-neutral-50: #fafafa; --wh-neutral-100: #f5f5f5; --wh-n=
eutral-200: #e5e5e5; --wh-neutral-300: #d4d4d4; --wh-neutral-400: #a3a3a3; =
--wh-neutral-500: #737373; --wh-neutral-600: #525252; --wh-neutral-700: #40=
4040; --wh-neutral-800: #262626; --wh-neutral-900: #171717; --wh-neutral-95=
0: #0a0a0a; --wh-stone-50: #fafaf9; --wh-stone-100: #f5f5f4; --wh-stone-200=
: #e7e5e4; --wh-stone-300: #d6d3d1; --wh-stone-400: #a8a29e; --wh-stone-500=
: #78716c; --wh-stone-600: #57534e; --wh-stone-700: #44403c; --wh-stone-800=
: #292524; --wh-stone-900: #1c1917; --wh-stone-950: #0c0a09; --wh-red-50: #=
fef2f2; --wh-red-100: #fee2e2; --wh-red-200: #fecaca; --wh-red-300: #fca5a5=
; --wh-red-400: #f87171; --wh-red-500: #ef4444; --wh-red-600: #dc2626; --wh=
-red-700: #b91c1c; --wh-red-800: #991b1b; --wh-red-900: #7f1d1d; --wh-red-9=
50: #450a0a; --wh-orange-50: #fff7ed; --wh-orange-100: #ffedd5; --wh-orange=
-200: #fed7aa; --wh-orange-300: #fdba74; --wh-orange-400: #fb923c; --wh-ora=
nge-500: #f97316; --wh-orange-600: #ea580c; --wh-orange-700: #c2410c; --wh-=
orange-800: #9a3412; --wh-orange-900: #7c2d12; --wh-orange-950: #431407; --=
wh-amber-50: #fffbeb; --wh-amber-100: #fef3c7; --wh-amber-200: #fde68a; --w=
h-amber-300: #fcd34d; --wh-amber-400: #fbbf24; --wh-amber-500: #f59e0b; --w=
h-amber-600: #d97706; --wh-amber-700: #b45309; --wh-amber-800: #92400e; --w=
h-amber-900: #78350f; --wh-amber-950: #451a03; --wh-yellow-50: #fefce8; --w=
h-yellow-100: #fef9c3; --wh-yellow-200: #fef08a; --wh-yellow-300: #fde047; =
--wh-yellow-400: #facc15; --wh-yellow-500: #eab308; --wh-yellow-600: #ca8a0=
4; --wh-yellow-700: #a16207; --wh-yellow-800: #854d0e; --wh-yellow-900: #71=
3f12; --wh-yellow-950: #422006; --wh-lime-50: #f7fee7; --wh-lime-100: #ecfc=
cb; --wh-lime-200: #d9f99d; --wh-lime-300: #bef264; --wh-lime-400: #a3e635;=
 --wh-lime-500: #84cc16; --wh-lime-600: #65a30d; --wh-lime-700: #4d7c0f; --=
wh-lime-800: #3f6212; --wh-lime-900: #365314; --wh-lime-950: #1a2e05; --wh-=
green-50: #f0fdf4; --wh-green-100: #dcfce7; --wh-green-200: #bbf7d0; --wh-g=
reen-300: #86efac; --wh-green-400: #4ade80; --wh-green-500: #22c55e; --wh-g=
reen-600: #16a34a; --wh-green-700: #15803d; --wh-green-800: #166534; --wh-g=
reen-900: #14532d; --wh-green-950: #052e16; --wh-emerald-50: #ecfdf5; --wh-=
emerald-100: #d1fae5; --wh-emerald-200: #a7f3d0; --wh-emerald-300: #6ee7b7;=
 --wh-emerald-400: #34d399; --wh-emerald-500: #10b981; --wh-emerald-600: #0=
59669; --wh-emerald-700: #047857; --wh-emerald-800: #065f46; --wh-emerald-9=
00: #064e3b; --wh-emerald-950: #022c22; --wh-teal-50: #f0fdfa; --wh-teal-10=
0: #ccfbf1; --wh-teal-200: #99f6e4; --wh-teal-300: #5eead4; --wh-teal-400: =
#2dd4bf; --wh-teal-500: #14b8a6; --wh-teal-600: #0d9488; --wh-teal-700: #0f=
766e; --wh-teal-800: #115e59; --wh-teal-900: #134e4a; --wh-teal-950: #042f2=
e; --wh-cyan-50: #ecfeff; --wh-cyan-100: #cffafe; --wh-cyan-200: #a5f3fc; -=
-wh-cyan-300: #67e8f9; --wh-cyan-400: #22d3ee; --wh-cyan-500: #06b6d4; --wh=
-cyan-600: #0891b2; --wh-cyan-700: #0e7490; --wh-cyan-800: #155e75; --wh-cy=
an-900: #164e63; --wh-cyan-950: #083344; --wh-sky-50: #f0f9ff; --wh-sky-100=
: #e0f2fe; --wh-sky-200: #bae6fd; --wh-sky-300: #7dd3fc; --wh-sky-400: #38b=
df8; --wh-sky-500: #0ea5e9; --wh-sky-600: #0284c7; --wh-sky-700: #0369a1; -=
-wh-sky-800: #075985; --wh-sky-900: #0c4a6e; --wh-sky-950: #082f49; --wh-bl=
ue-50: #eff6ff; --wh-blue-100: #dbeafe; --wh-blue-200: #bfdbfe; --wh-blue-3=
00: #93c5fd; --wh-blue-400: #60a5fa; --wh-blue-500: #3b82f6; --wh-blue-600:=
 #2563eb; --wh-blue-700: #1d4ed8; --wh-blue-800: #1e40af; --wh-blue-900: #1=
e3a8a; --wh-blue-950: #172554; --wh-indigo-50: #eef2ff; --wh-indigo-100: #e=
0e7ff; --wh-indigo-200: #c7d2fe; --wh-indigo-300: #a5b4fc; --wh-indigo-400:=
 #818cf8; --wh-indigo-500: #6366f1; --wh-indigo-600: #4f46e5; --wh-indigo-7=
00: #4338ca; --wh-indigo-800: #3730a3; --wh-indigo-900: #312e81; --wh-indig=
o-950: #1e1b4b; --wh-violet-50: #f5f3ff; --wh-violet-100: #ede9fe; --wh-vio=
let-200: #ddd6fe; --wh-violet-300: #c4b5fd; --wh-violet-400: #a78bfa; --wh-=
violet-500: #8b5cf6; --wh-violet-600: #7c3aed; --wh-violet-700: #6d28d9; --=
wh-violet-800: #5b21b6; --wh-violet-900: #4c1d95; --wh-violet-950: #2e1065;=
 --wh-purple-50: #faf5ff; --wh-purple-100: #f3e8ff; --wh-purple-200: #e9d5f=
f; --wh-purple-300: #d8b4fe; --wh-purple-400: #c084fc; --wh-purple-500: #a8=
55f7; --wh-purple-600: #9333ea; --wh-purple-700: #7e22ce; --wh-purple-800: =
#6b21a8; --wh-purple-900: #581c87; --wh-purple-950: #3b0764; --wh-fuchsia-5=
0: #fdf4ff; --wh-fuchsia-100: #fae8ff; --wh-fuchsia-200: #f5d0fe; --wh-fuch=
sia-300: #f0abfc; --wh-fuchsia-400: #e879f9; --wh-fuchsia-500: #d946ef; --w=
h-fuchsia-600: #c026d3; --wh-fuchsia-700: #a21caf; --wh-fuchsia-800: #86198=
f; --wh-fuchsia-900: #701a75; --wh-fuchsia-950: #4a044e; --wh-pink-50: #fdf=
2f8; --wh-pink-100: #fce7f3; --wh-pink-200: #fbcfe8; --wh-pink-300: #f9a8d4=
; --wh-pink-400: #f472b6; --wh-pink-500: #ec4899; --wh-pink-600: #db2777; -=
-wh-pink-700: #be185d; --wh-pink-800: #9d174d; --wh-pink-900: #831843; --wh=
-pink-950: #500724; --wh-rose-50: #fff1f2; --wh-rose-100: #ffe4e6; --wh-ros=
e-200: #fecdd3; --wh-rose-300: #fda4af; --wh-rose-400: #fb7185; --wh-rose-5=
00: #f43f5e; --wh-rose-600: #e11d48; --wh-rose-700: #be123c; --wh-rose-800:=
 #9f1239; --wh-rose-900: #881337; --wh-rose-950: #4c0519; --wh-primary-colo=
r: var(--wh-primary-500); --wh-primary-color-hover: #00a16e; --wh-primary-c=
olor-transparent: #00b0783b; --wh-primary-light: #53e3a6; --wh-primary-dark=
: #007f4b; --wh-primary-dark-hover: #017444; --wh-primary-shadow: #00b07841=
; --wh-primary-shadow-2: #00b07870; --wh-primary-border-color: #c8c8c870; -=
-secondary-color: #3d4455; --secondary-color-hover: #3a4052; --secondary-co=
lor-transparent: #3d44556b; --secondary-light: #4c556d; --secondary-dark: #=
252934; --secondary-dark-hover: #191b22; --secondary-dark-transparent: #2e2=
d2d46; --highlight-color: #92ffaa; --error-color: #d62d4c; --warning-color:=
 #ffcc00; --error-info: #14854e; --success-color: #4BB543; --font-color: #2=
f3237; --font-color-light: #626364; --font-color-dark: #252525; --wh-font-f=
amily: 'Inter', 'SF Pro Display', -apple-system, BlinkMacSystemFont,
  'Open Sans', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell',
  'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif; --font-family: v=
ar(--wh-font-family); --font-size: 12px; --webhighlights-font-size: 12px; -=
-link-color: #1d9bf0; --wh-form-active-color: #3b82f6; --wh-mobile-breakpoi=
nt: 767px; --BREAKPOINT_XS: 575px; --BREAKPOINT_S: 767px; --BREAKPOINT_M: 9=
91px; --BREAKPOINT_L: 1199px; --BREAKPOINT_XL: 1399px; --BREAKPOINT_XXL: 16=
99px; --wh-danger-color: var(--wh-red-600); --wh-danger-color-hover: var(--=
wh-red-700); --wh-font-size: 13px; --wh-blockquote-line-height: 1.3; --wh-b=
g-base: var(--wh-secondary-600); --wh-bg-base-hover: var(--wh-secondary-500=
); --wh-border-base: var(--wh-secondary-200); --wh-border-base-hover: var(-=
-wh-secondary-100); --wh-border-base-strong: var(--wh-secondary-100); --wh-=
border-base-strong-hover: var(--wh-secondary-50); --wh-bg-base-hover-strong=
: var(--wh-secondary-300); --wh-bg-back: var(--wh-secondary-700); --wh-bg-b=
ack-strong: var(--wh-secondary-800); --wh-bg-back-strong-hover: var(--wh-se=
condary-900); --wh-bg-back-hover: var(--wh-secondary-600); --wh-bg-back-hov=
er-strong: var(--wh-secondary-800); --wh-border-back: var(--wh-secondary-10=
0); --wh-border-back-strong: var(--wh-secondary-50); --wh-bg-front: var(--w=
h-secondary-400); --wh-bg-front-strong: var(--wh-secondary-200); --wh-bg-fr=
ont-strong-hover: var(--wh-secondary-100); --wh-bg-front-hover: var(--wh-se=
condary-300); --wh-bg-front-hover-strong: var(--wh-secondary-200); --wh-bor=
der-front: hsl(227, 20%, 25%); --wh-border-front-strong: hsl(227, 20%, 35%)=
; --wh-text-stronger: hsla(0, 0%, 100%, 0.95); --wh-text-strongest: hsla(0,=
 0%, 100%, 1); --wh-text-strong: rgba(255, 255, 255, 0.9); --wh-text: rgba(=
255, 255, 255, 0.85); --wh-text-hover: var(--wh-text-strong); --wh-text-lig=
ht: rgba(255, 255, 255, 0.73); --wh-text-lighter: rgba(255, 255, 255, 0.63)=
; --wh-text-lightest: rgba(255, 255, 255, 0.5); --wh-border-color: hsla(0, =
0%, 100%, 0.15); --wh-border-color-strong: hsla(0, 0%, 100%, 0.25); --wh-no=
te-editor-bg-color: hsl(221, 27%, 20%); --wh-note-editor-bg-color-preview: =
hsl(221, 27%, 18%); --wh-bg-tags: var(--wh-secondary-300); --wh-bg-tags-hov=
er: var(--wh-secondary-200); --wh-syntax-bg-color: rgba(255, 255, 255, 0.05=
); --wh-fallback-img-color: var(--wh-secondary-600); --wh-bg-disabled: hsl(=
220, 22%, 18%); --wh-bg-notification-unread: hsla(161, 100%, 20%, 0.15); --=
wh-bg-notification-unread-hover: hsla(161, 100%, 20%, 0.05); --wh-subtle-gr=
ay: rgb(255, 255, 255, 0.1); --wh-shadow: inset 0 0 0.5px 1px hsla(0, 0%, 1=
00%, 0.1),
      /* 2. shadow ring \1f447  */ 0 0 0 1px hsla(230, 13%, 9%, 0.075),
      /* 3. multiple soft shadows \1f447  */ 0 0.3px 0.4px hsla(230, 13%, 9=
%, 0.02),
      0 0.9px 1.5px hsla(230, 13%, 9%, 0.045),
      0 3.5px 6px hsla(230, 13%, 9%, 0.09); --wh-shadow-primary: var(--wh-p=
rimary-500) 0px 0px 0px 1px inset,
      var(--wh-primary-500) 0px 0px 1px; }
------MultipartBoundary--7G4pNoGW1euGe5PsGOPcTkmbEFOKKFUSRwkQmxqo5e----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-56b53555-5f76-43bf-b464-101ef3163c8b@mhtml.blink

@charset "windows-1252";

webhighlights-sidebar { --webhighlights-font-size: 14px; }

body.web-highlights-animate { transition: margin-left 300ms linear 0s, marg=
in-right; }

body.web-highlights-open { margin-left: 410px !important; }
------MultipartBoundary--7G4pNoGW1euGe5PsGOPcTkmbEFOKKFUSRwkQmxqo5e----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-fd48db66-d562-4a67-86e3-60c13906e64b@mhtml.blink

@charset "windows-1252";

web-highlight.webhighlights-highlight { border-radius: 2px; background-colo=
r: rgb(146, 255, 170); cursor: pointer; }

web-highlight.webhighlights-highlight.webhighlight-with-tags, web-highlight=
.webhighlights-highlight.webhighlight-with-notes { border-bottom: 2.8px sol=
id gray; border-radius: 0px; }

web-highlight > :not(webhighlights-popup-toolbox) { background-color: rgb(1=
46, 255, 170); }

webhighlights-popup-toolbox.contains-highlight { transform: translate(-63px=
, -10px); position: fixed; }
------MultipartBoundary--7G4pNoGW1euGe5PsGOPcTkmbEFOKKFUSRwkQmxqo5e----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://pdos.csail.mit.edu/6.S081/2020/labs/labs.css

@charset "windows-1252";

.easy { color: rgb(0, 204, 0); }

.moderate { color: rgb(0, 102, 255); }

.hard { color: rgb(255, 51, 0); }

div.required, div.challenge, div.question, div.warning, div.prereq { margin=
: 1em auto; width: 80%; background-color: rgb(224, 224, 255); padding-left:=
 1em; padding-right: 1em; }

div.required .header { font-weight: bold; }

div.challenge .header { font-style: italic; }

div.question .header { font-weight: bold; }

div.required { background-color: rgb(224, 224, 255); border: 1px solid rgb(=
192, 192, 255); }

div.challenge { background-color: rgb(255, 224, 224); border: 1px solid rgb=
(255, 192, 192); }

div.question { background-color: rgb(224, 224, 255); border: 1px solid rgb(=
192, 192, 255); }

div.warning { background-color: rgb(255, 224, 224); border: 1px solid rgb(2=
55, 192, 192); }

div.prereq { background-color: rgb(255, 239, 213); border: 1px solid rgb(25=
5, 192, 192); }

kbd { color: rgb(0, 119, 0); font-family: monospace; font-weight: bold; }
------MultipartBoundary--7G4pNoGW1euGe5PsGOPcTkmbEFOKKFUSRwkQmxqo5e------
